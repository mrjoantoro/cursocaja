


const createUser = async (userData) => {
  try {
    const existingUser = await User.findOne({ email: userData.email });
    if (existingUser) {
      throw new Error("User already exists");
    }

    const user = new User(userData);
    await user.save();
    return user;
  } catch (error) {
    logger.error("Error creating user:", error);
    throw error;
  }
};

const authenticateUser = async (email, password) => {
  try {
    const user = await User.findOne({ email });
    if (!user) {
      throw new Error("User not found");
    }

    const isValid = await bcrypt.compare(password, user.password);
    if (!isValid) {
      throw new Error("Incorrect password");
    }

    const token = jwt.sign(
      { id: user._id, role: user.role },
      config.jwt.secret,
      {
        expiresIn: config.jwt.expiration,
      }
    );

    return { user, token };
  } catch (error) {
    logger.error("Error authenticating user:", error);
    throw error;
  }
};

const updateUser = async (id, updatedData) => {
  try {
    const user = await User.findByIdAndUpdate(id, updatedData, { new: true });
    if (!user) {
      throw new Error("User not found");
    }
    return user;
  } catch (error) {
    logger.error("Error updating user:", error);
    throw error;
  }
};

const deleteUser = async (id) => {
  try {
    const user = await User.findByIdAndDelete(id);
    if (!user) {
      throw new Error("User not found");
    }
    return user;
  } catch (error) {
    logger.error("Error deleting user:", error);
    throw error;
  }
};

const listUsers = async () => {
  try {
    const users = await User.find();
    return users;
  } catch (error) {
    logger.error("Error listing users:", error);
    throw error;
  }
};

const getUser = async (id) => {
  try {
    const user = await User.findById(id);
    if (!user) {
      throw new Error("User not found");
    }
    return user;
  } catch (error) {
    logger.error("Error getting user:", error);
    throw error;
  }
};

module.exports = {
  createUser,
  authenticateUser,
  updateUser,
  deleteUser,
  listUsers,
  getUser,
};


exports.authenticateUser = async (req, res) => {
  try {
    const { email, password } = req.body;
    const { user, token } = await userService.authenticateUser(email, password);
    res.status(200).json({ user: user, token: token });
  } catch (error) {
    res.status(401).json({ message: error.message });
  }
};

exports.updateUser = async (req, res) => {
  try {
    const updatedUser = await userService.updateUser(req.params.id, req.body);
    res.json(updatedUser);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
